# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
trigger: 
  # branches:
  #   include:
  #   - '*'
  tags:
    include:
    - '*SNAPSHOT*'
    - '*RELEASE*'
    - '*RC*'  
  paths:
    exclude:
    - '*.md'
    - 'img/*'

# resources:
# - repo: self

pool:
  name: agents2

variables:

  # Container registry service connection established during pipeline creation
  # dockerRegistryServiceConnection: '<your-registry-connection>'
  # imageRepository: '<your-project(imagename)>'
  # containerRegistry: '<your-registry>.azurecr.io'

  dockerRegistryServiceConnection: 'spreg'
  imageRepository: 'petclinic/spring-petclinic-monolith'
  containerRegistry: 'spreg.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'azurespringacr1580782c-auth'
  # Maven Caching
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  # Agent VM image name
  # vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build      
    steps:
    - checkout: self
      persistCredentials: true
    - task: Gradle@3
      inputs:       
        gradleWrapperFile: 'gradlew'
        tasks: 'build'
        publishJUnitResults: true        
        testResultsFiles: '**/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: 1.17
        # codeCoverageTool: 'jacoco'
        # codeCoverageEnabled: true
        # codeCoverageClassFilesDirectories:  'build/classes/java/main, build/classes/java/test'
        # codeCoverageSourceDirectories: 'src/main/java, src/test/java'
        # codeCoverageReportDirectory: 'build/jacoco'

    # - task: PublishCodeCoverageResults@1
    #   inputs:
    #     codeCoverageTool: 'JaCoCo' # 'Cobertura' | 'JaCoCo'. Required. Code coverage tool. Default: JaCoCo.
    #     summaryFileLocation: './build' # string. Required when codeCoverageTool == Cobertura. Path to Cobertura summary file. Wildcards are supported.
    #     # string. Required. Summary file. 
    #     #pathToSources: # string. Path to Source files. 
    #     #reportDirectory: # string. Report directory. 
    #     #additionalCodeCoverageFiles: # string. Additional files. 
    #     #failIfCoverageEmpty: false # boolean. Fail when code coverage results are missing. Default: false.    
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(build.sourceBranchName)  
    
    - task: Bash@3    
      inputs: 
        targetType: inline
        script: |
          sed -i 's/tag:.*/tag: $(build.sourceBranchName)/g' charts/*/values*.yaml
          sed -i 's/appVersion:.*/appVersion: $(build.sourceBranchName)/g' charts/*/Chart.yaml

    - script: |
        git config --global user.email "andrewmin1@outlook.com"
        git config --global user.name "Azure Pipelines"
        git pull origin $(build.SourceBranchName)
        git add charts/*
        git commit -m "version $(build.sourceBranchName) to Charts"
        git push origin HEAD:$(build.SourceBranchName)
      displayName: 'Commit for GitOps'
      workingDirectory: $(build.SourcesDirectory)

# - stage: Deploy
#   displayName: Deploy Snapshot to Dev environment
#   dependsOn: Build
#   # condition: contains(variables['build.sourceBranch'], 'SNAPSHOT')
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: 'dev.spring-pets'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: HelmDeploy@0
#             inputs:
#               connectionType: 'Kubernetes Service Connection'
#               kubernetesServiceConnection: 'dev-spring-pets-1698724967311'
#               namespace: 'spring-pets'
#               command: upgrade
#               chartType: Name
#               chartName: '$(Pipeline.Workspace)/charts/petclinic'
#               overrideFiles: '$(Pipeline.Workspace)/charts/petclinic/values-stage.yaml'
#               releaseName: 'petclinic-dev'
#               arguments: '--create-namespace'